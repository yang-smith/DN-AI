def prompt_split(records):
    prompt = f"""
        -Goal-
        我想让你帮我对下面的聊天记录做分割。将相关的聊天记录聚在一块。
        我给你的聊天记录按时间顺序排列，请你尽量从相关性角度聚类分割。
        注意你只做分割，不要改变聊天记录本身。
        使用json格式输出，key是聚类主题，value是对应聊天记录的id
        不要漏掉任何一条聊天记录。每一条聊天记录只能出现一次。
        

        聚类主题请保留较多的信息。将不好判断的聊天记录放在“未知”主题下。
        ######################
        -Real Data-
        Use the following input for your answer.
        聊天记录：
        {records}

        Output:
        """
    return prompt

def prompt_summary(text):
    prompt = """你的任务是将下面的聊天记录转为方便记忆的一段话。
    请尽量保留大部分信息。保留相关的人和时间。
    -Real Data-
    records:
    ```
    {}
    ```
    """
    return prompt.format(text)

prompt_records_split = """
-Objective-
将群聊记录转化为易于记忆和检索的文本段落，保持对话的完整性和连贯性，同时：
1. 尽可能保留所有的信息。
2. 使用内在相关性作为分割的主要依据。
3. 每个文本段的长度应在50-400字之间。
4. 每一段的开头应当是具体日期和时间。


-Input Format-
时间戳格式：[YYYY-MM-DD HH:MM:SS]
消息格式：[YYYY-MM-DD HH:MM:SS] 发送者名称：消息内容

-Workflow-
1. 预处理：处理时间戳和特殊符号（如#接龙）。
2. 理解聊天记录：识别关键主题、参与者和时间线。
3. 聚类分割：根据主题相关性和时间顺序进行逻辑分割。
4. 文本转化：将分割后的记录转为丰富的文本，保留关键信息。
5. 格式化输出：按指定格式输出结果，确保信息完整性。

-Priority Information-
1. 活动组织和详情（时间、地点、目的）
2. 所有活动参与者（详细列出，不使用"等"）
3. 重要决策或共识
4. 关键参与者的核心观点
5. 具体的时间和地点信息
7. 潜在的争议点或分歧

-Tone and Style-
使用客观、简洁的语言，保持中立的叙述tone。

-Examples-
Input 1:
[2023-05-01 10:00:00] 张三：大家周末有空吗？想组织一次烧烤。
[2023-05-01 10:05:23] 李四：我有空，地点定了吗？
[2023-05-01 10:10:45] 王五：周六可以，周日不行。
[2023-05-01 10:15:12] 张三：那就定在周六吧，地点我再看看，到时发位置。

Output 1:
2023年5月1日，上午10:00-10:15，张三发起周末烧烤活动提议。经讨论，确定在周六举行，具体地点待定。参与者包括张三、李四、王五。

Input 2:
[2024-07-16 21:18:13] 小K：#接龙 激情环法季第3️⃣趴  上周六带大家一一起观摩了今年环法的高山赛段，感受了顶级自行车赛事的魅力，观赏了艰难的连续 爬坡和时速高达103km/h的下坡。  今晚，2024年环法的第16赛段，也是仅剩的最后一个平路冲刺赛段，不出意外的话，荣耀属于各大冲刺手。大集团冲刺的卡位、拼 抢、身体对抗，最后胜负也许只在分毫之间。  继续组织集体观赛，我们只看最后 的30km，大约在今晚10:00左右，B1讨论室，有瓜子花生。  1. 小K 2. K.C.（今天暂时不涉恐） 3. 阿德 4. 阿银 5. Yaya安之 6. Way 7. 把接龙重新顶上来，今晚KC赞助西瓜 8. 卓力力 等🍉 9. 小K 今晚看环法自行车赛的，根据目前的赛场实际进程，我们大约晚上10:30到B1即可，看最后的1小时。 10. 大海 11. 味味在这里

Output 2:
2024年7月16日晚上10点，小K组织了激情环法季第3趴活动。活动将观看环法自行车赛第16赛段的最后30公里，这是本届赛事最后一个平路冲刺赛段。活动更新为当晚10:30在B1讨论室举行，预计观赛时长1小时。现场准备了瓜子、花生，K.C.赞助西瓜。参与者包括小K、K.C.、阿德、阿银、Yaya安之、Way、卓力力、大海、味味在这里共11人。活动氛围热烈，参与者对自行车赛事表现出浓厚兴趣。

-Real Data-
Use the following input for your answer.
聊天记录：
{records}

Output:
"""


def prompt_split(records):
    prompt = prompt_records_split.format(records=records)
    return prompt



prompt_records_analyze = """
请对给定的聊天记录进行详细的数据分析和统计，重点关注以下方面：

活动信息分析：

识别所有组织的活动（如团购、观赛等）
统计每个活动的参与人数
列出活动的具体时间、地点和主要内容
分析最受欢迎的活动类型


时间分析：

确定聊天的最活跃时间段（按小时统计）
分析工作时间vs非工作时间的聊天频率
识别是否有特定的聊天模式（如午餐时间的订餐高峰）


参与度分析：

统计每个成员的发言次数
识别最活跃的成员
分析不同成员在不同类型话题中的参与度


话题分析：

识别主要讨论的话题和主题
统计每个话题的讨论持续时间和参与人数
分析哪些话题最容易引发讨论


特殊事件或异常：

识别任何特殊或异常的事件（如系统错误、紧急情况）
分析这些事件对整体聊天氛围的影响

-Real Data-
Use the following input for your answer.
聊天记录：
{records}

Output:
"""

def prompt_analyze(records):
    prompt = prompt_records_analyze.format(records=records)
    return prompt



prompt_records_analyze = """
请对给定的聊天记录进行详细的数据分析和统计，重点关注以下方面：

活动信息分析：

识别所有组织的活动（如团购、观赛等）
统计每个活动的参与人数
列出活动的具体时间、地点和主要内容
分析最受欢迎的活动类型


时间分析：

确定聊天的最活跃时间段（按小时统计）
分析工作时间vs非工作时间的聊天频率
识别是否有特定的聊天模式（如午餐时间的订餐高峰）


参与度分析：

统计每个成员的发言次数
识别最活跃的成员
分析不同成员在不同类型话题中的参与度


话题分析：

识别主要讨论的话题和主题
统计每个话题的讨论持续时间和参与人数
分析哪些话题最容易引发讨论


特殊事件或异常：

识别任何特殊或异常的事件（如系统错误、紧急情况）
分析这些事件对整体聊天氛围的影响

-Real Data-
Use the following input for your answer.
聊天记录：
{records}

Output:
"""

def prompt_analyze(records):
    prompt = prompt_records_analyze.format(records=records)
    return prompt


prompt_records_analyze_dig = """
请对给定的聊天记录进行深入分析，挖掘出有关社区生活的重要信息，特别是关于吃喝玩乐衣食住行方面的内容。这些信息将用于帮助社区小客服更好地了解和服务社区成员。请重点关注以下方面：

1. 餐饮信息：
   - 识别常被提及或推荐的餐厅、小吃店、咖啡馆等
   - 总结社区成员对各类餐厅的评价和偏好
   - 发现任何与外卖、团购相关的讨论或活动

2. 娱乐活动：
   - 列出社区内常见的娱乐活动（如观影、运动、聚会等）
   - 识别热门的娱乐场所
   - 总结社区成员组织或参与的特色活动

3. 购物信息：
   - 发现常被提及的购物场所（如超市、商场、市场等）
   - 识别社区成员经常讨论的商品或品牌
   - 总结任何与团购、优惠相关的信息

4. 交通出行：
   - 收集关于公共交通、共享单车、停车等方面的讨论
   - 识别社区成员经常提到的交通问题或建议
   - 总结任何与出行相关的便民信息

5. 住宿环境：
   - 收集关于社区环境、物业服务的评价和建议
   - 识别常被讨论的社区设施

6. 社区服务：
   - 识别社区成员经常询问或讨论的服务（如快递、维修、保洁等）
   - 收集对现有社区服务的评价和改进建议
   - 发现社区成员之间的互助信息

7. 特色信息：
   - 识别任何独特的社区传统或习惯
   - 收集反映社区文化或特色的讨论
   - 总结任何有助于了解社区氛围的信息

请以简洁明了的方式总结这些信息，重点突出最常被讨论和最受关注的内容。对于每个类别，请提供具体的例子和数据支持（如频繁度、参与度等）。

-Real Data-
Use the following input for your answer.
聊天记录：
{records}

Output:
"""

def prompt_analyze_dig(records):
    prompt = prompt_records_analyze_dig.format(records=records)
    return prompt

prompt_records_analyze_summary = """
下面是几天的分析内容，帮我将之合并到一起。
-Real Data-
Use the following input for your answer.
内容：
{records}

Output:
"""

def prompt_analyze_summary(records):
    prompt = prompt_records_analyze_summary.format(records=records)
    return prompt